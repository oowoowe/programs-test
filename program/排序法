#include <iostream>
#include <time.h>
#include <cstdlib>
#include <stack>
#include <queue>
using namespace std;
const int INF=1e9;
int* gen(int n,int min,int max){
	int *k=new int [n];
	for(int i=0;i!=n;i++)
		k[i]=rand()%(max-min+1)+min;
	return k;
}
void Selection_sort(int *N,int n){
	int k=0,j,m;
	for(int k=0;k!=n;k++){
		j=N[k],m=k;
		for(int i=k;i!=n;i++){
			if(j>N[i]){
				j=N[i];m=i;
			}
		}
		int c=j;
		N[m]=N[k];
		N[k]=c;
	}
}
void Insertion_sort(int *N,int n){
	if(n==1)return;
	for(int i=1;i!=n;i++){
		int k=i;
		while(k>0&&N[k-1]>N[k]){
			swap(N[k],N[k-1]);
			k--;
		}	
	}
}
void Bubble_sort(int *N,int n){
	for(int i=0;i!=n-1;i++){
		for(int k=0;k!=n-1;k++){
			if(N[k]>N[k+1])
				swap(N[k],N[k+1]);
		}
	}
}
void Quick_sort_R(int *N,int R,int L=0){
	if(R-L<=1)return;     
	int l=L+1,r=R-1,m=N[L];
	while(1){
		while(N[l]<m&&l<=r)l++;
		while(N[r]>m&&l<=r)r--;
		if(l>=r)break;
		swap(N[l],N[r]);
		l++;r--; 
	}
	swap(N[L],N[r]);
	Quick_sort_R(N,r,L);
	Quick_sort_R(N,R,r+1);
}
void Quick_sort(int *N,int n){
	if(n==1)return; 
	stack<int> L,R;
	L.push(0);R.push(n);
	while(!L.empty()){
		int Left=L.top(),Right=R.top();
		L.pop();R.pop();
		int l=Left+1,r=Right-1,m=N[Left];
		while(1){
			while(N[l]<m&&l<=r)l++;
			while(N[r]>m&&l<=r)r--;
			if(l>=r)break;
			swap(N[l],N[r]);
			l++;r--;
		}
		swap(N[Left],N[r]);
		if(r-Left>=1){L.push(Left);R.push(r);}
		if(Right-r-1>=1){L.push(r+1);R.push(Right);}
	}
}
int* Merge(int *A,int a,int *B,int b){
	int *N=new int[a+b];
	int an=0,bn=0,n=0;
	while(an<a&&bn<b){
		if(A[an]<B[bn]){
			N[n]=A[an];an++;
		}
		else{
			N[n]=B[bn];bn++;
		}
		n++;
	}
	while(an<a){N[n]=A[an];an++;n++;}
	while(bn<b){N[n]=B[bn];bn++;n++;}
	return N;
}
int* Merge_sort_R(int *N,int R){
	if(R==1)return N;
	const int mid=R/2;
	int *A=new int [mid];
	int *B=new int [R-mid];
	for(int i=0;i!=mid;i++)A[i]=N[i];
	for(int i=mid;i!=R;i++)B[i-mid]=N[i];
	A=Merge_sort_R(A,mid);
	B=Merge_sort_R(B,R-mid);
	int *C=Merge(A,mid,B,R-mid);
	delete [] A;
	delete [] B;
	delete [] N;
	return C;
}
void Merge_sort(int *N,int n){
	int i=1;
	while(i<n) i*=2;
	int *K=new int[i];
	for(int k=0;k!=i;k++){
		if(k<n) K[k]=N[k];
		else K[k]=INF;
	} 
	for(int size=2;size<=i;size*=2){
		for(int start=0;start<=i;start+=size){
			int* M=new int[size];
			int mid=start+size/2;
			int end=min(start+size,i);
			int a=start,b=mid,p=0;
			while(a<mid&&b<end){
				if(K[a]<K[b])M[p++]=K[a++];
				else M[p++]=K[b++];
			}
			while(a<mid)M[p++]=K[a++];
			while(b<end)M[p++]=K[b++];
			for(int m=0;m!=end-start;m++) K[start+m]=M[m];
			delete [] M;
		}
	}
	for(int k=0;k!=n;k++)N[k]=K[k];
	delete [] K;
}
void Heapify(int *N, int n, int i) {
	int l=2*i+1;
	int r=2*i+2;
	int s=i;
	if(l<n&&N[s]<N[l])s=l;
	if(r<n&&N[s]<N[r])s=r;
	if(s!=i){
		swap(N[s],N[i]);
		Heapify(N,n,s);
	}
}
void Heap_sort(int *N,int n){
	for(int i=n-1;i!=-1;i--)
		Heapify(N,n,i);
	for(int i=n-1;i!=0;i--){
		swap(N[0],N[i]);
		Heapify(N,i,0); 
	}
}
void Radix_sort(int *N,int n){
	int k=0,m=1;
	for(int i=0;i!=n;i++)
		if(k<N[i])k=N[i];
	while(k/m>0){
		queue<int> I[10]; 
		for(int i=0;i!=n;i++)
			I[N[i]/m%10].push(N[i]);
		int c=0;
		for(int i=0;i!=10;i++){
			while(!I[i].empty()){
				N[c++]=I[i].front();
				I[i].pop();
			}
		}
		m*=10;
	}
}
int main(){
	srand(time(NULL));
	int *N=gen(16,5,100);
	for(int i=0;i!=16;i++)
		cout<<N[i]<<" ";
	cout<<endl;
	Radix_sort(N,16);
	for(int i=0;i!=16;i++)
		cout<<N[i]<<" ";
} 
